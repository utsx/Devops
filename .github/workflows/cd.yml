name: Continuous Deployment - Update Images

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: '–û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      cluster_id:
        description: 'ID Kubernetes –∫–ª–∞—Å—Ç–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: cats7kf12gjptceuiapg)'
        required: true
        default: 'cats7kf12gjptceuiapg'
        type: string

env:
  DOCKER_REGISTRY: 'cr.yandex'

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      deploy-environment: ${{ steps.determine-env.outputs.environment }}
      cluster-id: ${{ steps.determine-env.outputs.cluster-id }}
      should-deploy: ${{ steps.checks.outputs.should-deploy }}
    
    steps:
    - name: Debug deployment trigger
      run: |
        echo "üîç Deployment trigger analysis:"
        echo "Event name: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Source workflow: ${{ github.event.workflow_run.name }}"
        fi
        echo "Actor: ${{ github.actor }}"
    
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine deployment environment
      id: determine-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          CLUSTER_ID="${{ github.event.inputs.cluster_id }}"
        else
          ENVIRONMENT="staging"
          CLUSTER_ID="cats7kf12gjptceuiapg"
        fi
        echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
        echo "cluster-id=${CLUSTER_ID}" >> $GITHUB_OUTPUT
        echo "üéØ Target environment: ${ENVIRONMENT}"
        echo "üéØ Target cluster ID: ${CLUSTER_ID}"

    - name: Check required secrets
      id: checks
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        YC_REGISTRY_KEY: ${{ secrets.YC_REGISTRY_KEY }}
        YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
        YC_SERVICE_ACCOUNT_KEY: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
      run: |
        echo "üîç Checking secrets for image update..."
        
        MISSING_SECRETS=""
        
        # Docker Hub access
        if [[ -z "${DOCKER_USERNAME}" ]]; then
          MISSING_SECRETS="${MISSING_SECRETS} DOCKER_USERNAME"
        fi
        
        # Yandex Container Registry access (service account key)
        if [[ -z "${YC_REGISTRY_KEY}" ]]; then
          MISSING_SECRETS="${MISSING_SECRETS} YC_REGISTRY_KEY"
        fi
        
        if [[ -z "${YC_REGISTRY_ID}" ]]; then
          MISSING_SECRETS="${MISSING_SECRETS} YC_REGISTRY_ID"
        fi

        # Kubernetes access (service account key for yc CLI)
        if [[ -z "${YC_SERVICE_ACCOUNT_KEY}" ]]; then
          MISSING_SECRETS="${MISSING_SECRETS} YC_SERVICE_ACCOUNT_KEY"
        fi
        
        if [[ -n "${MISSING_SECRETS}" ]]; then
          echo "‚ùå Missing required secrets:${MISSING_SECRETS}"
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "‚úÖ All secrets for image update are configured"
        echo "should-deploy=true" >> $GITHUB_OUTPUT

    - name: Update deployment summary
      run: |
        echo "## üöÄ Image Update Plan" >> $GITHUB_STEP_SUMMARY
        echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ steps.determine-env.outputs.environment }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cluster ID | ${{ steps.determine-env.outputs.cluster-id }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Actor | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY

  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –≤ Kubernetes
  update-images:
    name: Update Docker Images in Kubernetes
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    environment: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup Yandex Cloud CLI
      run: |
        echo "üîß Installing Yandex Cloud CLI..."
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

    - name: Configure Yandex Cloud CLI
      run: |
        echo "üîë Configuring Yandex Cloud CLI..."
        echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > sa-key.json
        yc config profile create deploy-profile
        yc config set service-account-key sa-key.json
        rm sa-key.json
        echo "‚úÖ Yandex Cloud CLI configured"

    - name: Configure kubectl
      run: |
        echo "üîë Configuring kubectl for cluster ID ${{ needs.pre-deployment-checks.outputs.cluster-id }}..."
        
        # –ü–æ–ª—É—á–∞–µ–º credentials –¥–ª—è kubectl (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–ª–∞—Å—Ç–µ—Ä–∞)
        yc managed-kubernetes cluster get-credentials ${{ needs.pre-deployment-checks.outputs.cluster-id }} --external --force
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        kubectl cluster-info
        kubectl get nodes
        
        echo "‚úÖ kubectl configured successfully"

    - name: Pull and push Docker images
      run: |
        echo "üê≥ Pulling from Docker Hub and pushing to Yandex Container Registry..."
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Yandex Container Registry
        echo '${{ secrets.YC_REGISTRY_KEY }}' | docker login ${{ env.DOCKER_REGISTRY }} -u json_key --password-stdin
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤
        VERSION="latest"
        REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
        
        # Docker Hub –æ–±—Ä–∞–∑—ã
        DOCKER_HUB_BACKEND="utsx/devops-backend:latest"
        DOCKER_HUB_FRONTEND="utsx/devops-frontend:latest"
        
        # Yandex Container Registry –æ–±—Ä–∞–∑—ã
        BACKEND_IMAGE="${{ env.DOCKER_REGISTRY }}/${REGISTRY_ID}/devops-backend:${VERSION}"
        FRONTEND_IMAGE="${{ env.DOCKER_REGISTRY }}/${REGISTRY_ID}/devops-frontend:${VERSION}"
        
        echo "üì• Pulling backend from Docker Hub..."
        docker pull $DOCKER_HUB_BACKEND
        docker tag $DOCKER_HUB_BACKEND $BACKEND_IMAGE
        docker push $BACKEND_IMAGE
        
        echo "üì• Pulling frontend from Docker Hub..."
        docker pull $DOCKER_HUB_FRONTEND
        docker tag $DOCKER_HUB_FRONTEND $FRONTEND_IMAGE
        docker push $FRONTEND_IMAGE
        
        echo "BACKEND_IMAGE=${BACKEND_IMAGE}" >> $GITHUB_ENV
        echo "FRONTEND_IMAGE=${FRONTEND_IMAGE}" >> $GITHUB_ENV
        echo "‚úÖ Images pulled from Docker Hub and pushed to Yandex CR"

    - name: Apply Kubernetes manifests (if not exists)
      run: |
        echo "üèóÔ∏è Applying Kubernetes manifests..."
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã (—Å–æ–∑–¥–∞–µ—Ç deployments –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        kubectl apply -f terraform/k8s-manifests.yaml
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ namespace
        kubectl wait --for=condition=Ready namespace/devops-app --timeout=60s 2>/dev/null || echo "Namespace already ready"
        
        echo "‚úÖ Kubernetes manifests applied"

    - name: Update Kubernetes deployments
      run: |
        echo "üöÄ Updating Kubernetes deployments in devops-app namespace..."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º backend deployment (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏ namespace)
        kubectl set image deployment/devops-backend devops-backend=${{ env.BACKEND_IMAGE }} -n devops-app
        
        # –û–±–Ω–æ–≤–ª—è–µ–º frontend deployment (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏ namespace)
        kubectl set image deployment/devops-frontend devops-frontend=${{ env.FRONTEND_IMAGE }} -n devops-app
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è rollout
        echo "‚è≥ Waiting for deployments to rollout..."
        kubectl rollout status deployment/devops-backend -n devops-app --timeout=600s
        kubectl rollout status deployment/devops-frontend -n devops-app --timeout=600s
        
        echo "‚úÖ Deployments updated successfully"

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment status in devops-app namespace..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º namespace
        kubectl get pods -l app=devops-backend -n devops-app
        kubectl get pods -l app=devops-frontend -n devops-app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ namespace
        kubectl get services -n devops-app
        
        # –ü–æ–ª—É—á–∞–µ–º NodePort –¥–ª—è frontend (LoadBalancer –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ NodePort –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ)
        FRONTEND_NODEPORT=$(kubectl get service devops-frontend-service -n devops-app -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "not-found")
        
        echo "üåê Frontend NodePort: ${FRONTEND_NODEPORT}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–¥–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º namespace
        kubectl wait --for=condition=ready pod -l app=devops-backend -n devops-app --timeout=300s
        kubectl wait --for=condition=ready pod -l app=devops-frontend -n devops-app --timeout=300s
        
        echo "‚úÖ All pods are ready in devops-app namespace"

    - name: Health checks
      run: |
        echo "üè• Running health checks in devops-app namespace..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint –±—ç–∫–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ port-forward (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∏ namespace)
        kubectl port-forward deployment/devops-backend 8080:8080 -n devops-app &
        PORT_FORWARD_PID=$!
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        sleep 10
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        if curl -f -s http://localhost:8080/actuator/health > /dev/null; then
          echo "‚úÖ Backend health check passed"
        else
          echo "‚ö†Ô∏è Backend health check failed (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –ë–î –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞)"
        fi
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º port-forward
        kill $PORT_FORWARD_PID 2>/dev/null || true
        
        echo "‚úÖ Health checks completed"

    - name: Update deployment summary
      if: always()
      run: |
        echo "## üìä Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞
        if [ "${{ job.status }}" = "success" ]; then
          echo "### ‚úÖ Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Deployment Status: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster ID**: ${{ needs.pre-deployment-checks.outputs.cluster-id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Image**: \`${{ env.BACKEND_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Image**: \`${{ env.FRONTEND_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º namespace
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üèÉ‚Äç‚ôÇÔ∏è Pod Status (devops-app namespace)" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        kubectl get pods -l "app in (devops-backend,devops-frontend)" -n devops-app || echo "Failed to get pod status" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up..."
        docker system prune -f || true
        echo "‚úÖ Cleanup completed"
