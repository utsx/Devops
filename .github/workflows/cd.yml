name: Continuous Deployment - Yandex Cloud

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: '–û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOCKER_REGISTRY: 'cr.yandex'
  TF_VERSION: '1.6.0'
  YC_VERSION: '0.112.0'

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      deploy-environment: ${{ steps.determine-env.outputs.environment }}
      should-deploy: ${{ steps.checks.outputs.should-deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine deployment environment
      id: determine-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
        else
          ENVIRONMENT="staging"
        fi
        echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
        echo "üéØ Target environment: ${ENVIRONMENT}"

    - name: Check required secrets
      id: checks
      run: |
        echo "üîç Checking Yandex Cloud secrets..."
        
        MISSING_SECRETS=""
        
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} DOCKER_USERNAME"
        fi
        
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} DOCKER_PASSWORD"
        fi
        
        if [ -z "${{ secrets.YC_SERVICE_ACCOUNT_KEY }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} YC_SERVICE_ACCOUNT_KEY"
        fi
        
        if [ -z "${{ secrets.YC_CLOUD_ID }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} YC_CLOUD_ID"
        fi
        
        if [ -z "${{ secrets.YC_FOLDER_ID }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} YC_FOLDER_ID"
        fi
        
        if [ -z "${{ secrets.YC_REGISTRY_ID }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} YC_REGISTRY_ID"
        fi
        
        if [ -n "$MISSING_SECRETS" ]; then
          echo "‚ùå Missing required secrets:${MISSING_SECRETS}"
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "‚úÖ All pre-deployment checks passed"
        echo "should-deploy=true" >> $GITHUB_OUTPUT

    - name: Update deployment summary
      run: |
        echo "## üöÄ Deployment Plan" >> $GITHUB_STEP_SUMMARY
        echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Cloud Provider | Yandex Cloud |" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | \`${{ steps.determine-env.outputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY

  # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Yandex Cloud
  deploy-to-yandex-cloud:
    name: Deploy to Yandex Cloud
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    environment: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Setup Yandex Cloud CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

    - name: Configure Yandex Cloud CLI
      run: |
        echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > sa-key.json
        yc config profile create deploy-profile
        yc config set service-account-key sa-key.json
        yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
        rm sa-key.json

    - name: Deploy infrastructure with Terraform
      working-directory: terraform
      run: |
        echo "üèóÔ∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform
        terraform init
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        terraform plan -var="environment=${{ needs.pre-deployment-checks.outputs.deploy-environment }}"
        terraform apply -auto-approve -var="environment=${{ needs.pre-deployment-checks.outputs.deploy-environment }}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞
        CLUSTER_NAME=$(terraform output -raw cluster_name)
        echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $GITHUB_ENV
        echo "‚úÖ Infrastructure deployed: $CLUSTER_NAME"

    - name: Configure kubectl
      run: |
        echo "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ kubectl..."
        
        # –ü–æ–ª—É—á–∞–µ–º credentials –¥–ª—è kubectl
        yc managed-kubernetes cluster get-credentials ${{ env.CLUSTER_NAME }} --external --force
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        kubectl cluster-info
        kubectl get nodes
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É–∑–ª–æ–≤
        kubectl wait --for=condition=Ready nodes --all --timeout=300s

    - name: Pull and push Docker images
      run: |
        echo "üê≥ Pulling from Docker Hub and pushing to Yandex Container Registry..."
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Yandex Container Registry
        echo '${{ secrets.DOCKER_PASSWORD }}' | docker login ${{ env.DOCKER_REGISTRY }} -u json_key --password-stdin
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤
        VERSION="latest"
        REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
        
        # Docker Hub –æ–±—Ä–∞–∑—ã
        DOCKER_HUB_BACKEND="utsx/devops-backend:latest"
        DOCKER_HUB_FRONTEND="utsx/devops-frontend:latest"
        
        # Yandex Container Registry –æ–±—Ä–∞–∑—ã
        BACKEND_IMAGE="${{ env.DOCKER_REGISTRY }}/${REGISTRY_ID}/devops-backend:${VERSION}"
        FRONTEND_IMAGE="${{ env.DOCKER_REGISTRY }}/${REGISTRY_ID}/devops-frontend:${VERSION}"
        
        echo "üì• Pulling backend from Docker Hub..."
        docker pull $DOCKER_HUB_BACKEND
        docker tag $DOCKER_HUB_BACKEND $BACKEND_IMAGE
        docker push $BACKEND_IMAGE
        
        echo "üì• Pulling frontend from Docker Hub..."
        docker pull $DOCKER_HUB_FRONTEND
        docker tag $DOCKER_HUB_FRONTEND $FRONTEND_IMAGE
        docker push $FRONTEND_IMAGE
        
        echo "BACKEND_IMAGE=${BACKEND_IMAGE}" >> $GITHUB_ENV
        echo "FRONTEND_IMAGE=${FRONTEND_IMAGE}" >> $GITHUB_ENV
        echo "‚úÖ Images pulled from Docker Hub and pushed to Yandex CR"

    - name: Deploy to Kubernetes
      working-directory: terraform
      run: |
        echo "üöÄ Deploying to Kubernetes..."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏
        sed -i "s|utsx/devops-backend:latest|${{ env.BACKEND_IMAGE }}|g" k8s-manifests.yaml
        sed -i "s|utsx/devops-frontend:latest|${{ env.FRONTEND_IMAGE }}|g" k8s-manifests.yaml
        
        # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º namespace –∏ PostgreSQL —Å–Ω–∞—á–∞–ª–∞
        echo "üóÑÔ∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ PostgreSQL..."
        kubectl apply -f k8s-manifests.yaml --selector="app!=devops-backend,app!=devops-frontend"
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
        kubectl wait --for=condition=available --timeout=300s deployment/postgres -n devops-app
        
        # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        echo "üì± –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
        kubectl apply -f k8s-manifests.yaml
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        kubectl wait --for=condition=available --timeout=300s deployment/devops-backend -n devops-app
        kubectl wait --for=condition=available --timeout=300s deployment/devops-frontend -n devops-app

    - name: Health checks
      run: |
        echo "üè• Running health checks..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤
        kubectl get pods -n devops-app
        kubectl get services -n devops-app
        
        # –ü–æ–ª—É—á–∞–µ–º NodePort –∏ IP
        NODE_PORT=$(kubectl get services -n devops-app devops-frontend-service -o jsonpath='{.spec.ports[0].nodePort}')
        EXTERNAL_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        
        if [ -n "$EXTERNAL_IP" ] && [ -n "$NODE_PORT" ]; then
          APP_URL="http://${EXTERNAL_IP}:${NODE_PORT}"
          echo "üåê Application URL: $APP_URL"
          
          # –ü—Ä–æ—Å—Ç—ã–µ health checks
          sleep 30
          
          echo "üîç Testing frontend..."
          for i in {1..5}; do
            if curl -s -o /dev/null -w "%{http_code}" "$APP_URL" | grep -q "200\|301\|302"; then
              echo "‚úÖ Frontend health check passed (attempt $i)"
              break
            else
              echo "‚è≥ Frontend not ready yet (attempt $i/5)"
              if [ $i -eq 5 ]; then
                echo "‚ùå Frontend health check failed"
                exit 1
              fi
              sleep 10
            fi
          done
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
          echo "üîç Testing backend API..."
          API_URL="$APP_URL/api/actuator/health"
          if curl -s -f "$API_URL" | grep -q "UP"; then
            echo "‚úÖ Backend API health check passed"
          else
            echo "‚ö†Ô∏è Backend API health check failed, but continuing..."
          fi
          
          echo "APP_URL=${APP_URL}" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è Cannot determine external access URL"
          echo "Node Port: $NODE_PORT"
          echo "External IP: $EXTERNAL_IP"
        fi

    - name: Update deployment summary
      if: always()
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üöÄ Yandex Cloud Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ env.APP_URL }}" ]; then
            echo "üåê **Application URL**: ${{ env.APP_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "üîó **API Health**: ${{ env.APP_URL }}/api/actuator/health" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "‚ùå **Deployment failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Cloud Provider**: Yandex Cloud" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster**: ${{ env.CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: Yandex Container Registry" >> $GITHUB_STEP_SUMMARY
        echo "- **Images**: Pulled from Docker Hub (utsx/devops-backend, utsx/devops-frontend)" >> $GITHUB_STEP_SUMMARY
        echo "- **Kubernetes**: Applications deployed and verified" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Useful Commands" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Check pods status" >> $GITHUB_STEP_SUMMARY
        echo "kubectl get pods -n devops-app" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Check backend logs" >> $GITHUB_STEP_SUMMARY
        echo "kubectl logs -f deployment/devops-backend -n devops-app" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Check frontend logs" >> $GITHUB_STEP_SUMMARY
        echo "kubectl logs -f deployment/devops-frontend -n devops-app" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        rm -f sa-key.json