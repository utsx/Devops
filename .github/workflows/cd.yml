name: Continuous Deployment - Update Images

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Окружение для развертывания'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      cluster_id:
        description: 'ID Kubernetes кластера (например: cats7kf12gjptceuiapg)'
        required: true
        default: 'cats7kf12gjptceuiapg'
        type: string

env:
  DOCKER_REGISTRY: 'cr.yandex'

jobs:
  # Проверка готовности к развертыванию
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      deploy-environment: ${{ steps.determine-env.outputs.environment }}
      cluster-id: ${{ steps.determine-env.outputs.cluster-id }}
      should-deploy: ${{ steps.checks.outputs.should-deploy }}
    
    steps:
    - name: Debug deployment trigger
      run: |
        echo "🔍 Deployment trigger analysis:"
        echo "Event name: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Source workflow: ${{ github.event.workflow_run.name }}"
        fi
        echo "Actor: ${{ github.actor }}"
    
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine deployment environment
      id: determine-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          CLUSTER_ID="${{ github.event.inputs.cluster_id }}"
        else
          ENVIRONMENT="staging"
          CLUSTER_ID="cats7kf12gjptceuiapg"
        fi
        echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
        echo "cluster-id=${CLUSTER_ID}" >> $GITHUB_OUTPUT
        echo "🎯 Target environment: ${ENVIRONMENT}"
        echo "🎯 Target cluster ID: ${CLUSTER_ID}"

    - name: Check required secrets
      id: checks
      run: |
        echo "🔍 Checking secrets for image update..."
        
        MISSING_SECRETS=""
        
        # Docker Hub access
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} DOCKER_USERNAME"
        fi
        
        # Yandex Container Registry access (service account key)
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} DOCKER_PASSWORD"
        fi
        
        if [ -z "${{ secrets.YC_REGISTRY_ID }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} YC_REGISTRY_ID"
        fi

        # Kubernetes access (service account key for yc CLI)
        if [ -z "${{ secrets.YC_SERVICE_ACCOUNT_KEY }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} YC_SERVICE_ACCOUNT_KEY"
        fi
        
        if [ -n "$MISSING_SECRETS" ]; then
          echo "❌ Missing required secrets:${MISSING_SECRETS}"
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "✅ All secrets for image update are configured"
        echo "should-deploy=true" >> $GITHUB_OUTPUT

    - name: Update deployment summary
      run: |
        echo "## 🚀 Image Update Plan" >> $GITHUB_STEP_SUMMARY
        echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ steps.determine-env.outputs.environment }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cluster ID | ${{ steps.determine-env.outputs.cluster-id }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Actor | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY

  # Обновление образов в Kubernetes
  update-images:
    name: Update Docker Images in Kubernetes
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    environment: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup Yandex Cloud CLI
      run: |
        echo "🔧 Installing Yandex Cloud CLI..."
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

    - name: Configure Yandex Cloud CLI
      run: |
        echo "🔑 Configuring Yandex Cloud CLI..."
        echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > sa-key.json
        yc config profile create deploy-profile
        yc config set service-account-key sa-key.json
        rm sa-key.json
        echo "✅ Yandex Cloud CLI configured"

    - name: Configure kubectl
      run: |
        echo "🔑 Configuring kubectl for cluster ID ${{ needs.pre-deployment-checks.outputs.cluster-id }}..."
        
        # Получаем credentials для kubectl (используем ID кластера)
        yc managed-kubernetes cluster get-credentials ${{ needs.pre-deployment-checks.outputs.cluster-id }} --external --force
        
        # Проверяем подключение
        kubectl cluster-info
        kubectl get nodes
        
        echo "✅ kubectl configured successfully"

    - name: Pull and push Docker images
      run: |
        echo "🐳 Pulling from Docker Hub and pushing to Yandex Container Registry..."
        
        # Авторизация в Yandex Container Registry
        echo '${{ secrets.DOCKER_PASSWORD }}' | docker login ${{ env.DOCKER_REGISTRY }} -u json_key --password-stdin
        
        # Определяем теги для образов
        VERSION="latest"
        REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
        
        # Docker Hub образы
        DOCKER_HUB_BACKEND="utsx/devops-backend:latest"
        DOCKER_HUB_FRONTEND="utsx/devops-frontend:latest"
        
        # Yandex Container Registry образы
        BACKEND_IMAGE="${{ env.DOCKER_REGISTRY }}/${REGISTRY_ID}/devops-backend:${VERSION}"
        FRONTEND_IMAGE="${{ env.DOCKER_REGISTRY }}/${REGISTRY_ID}/devops-frontend:${VERSION}"
        
        echo "📥 Pulling backend from Docker Hub..."
        docker pull $DOCKER_HUB_BACKEND
        docker tag $DOCKER_HUB_BACKEND $BACKEND_IMAGE
        docker push $BACKEND_IMAGE
        
        echo "📥 Pulling frontend from Docker Hub..."
        docker pull $DOCKER_HUB_FRONTEND
        docker tag $DOCKER_HUB_FRONTEND $FRONTEND_IMAGE
        docker push $FRONTEND_IMAGE
        
        echo "BACKEND_IMAGE=${BACKEND_IMAGE}" >> $GITHUB_ENV
        echo "FRONTEND_IMAGE=${FRONTEND_IMAGE}" >> $GITHUB_ENV
        echo "✅ Images pulled from Docker Hub and pushed to Yandex CR"

    - name: Update Kubernetes deployments
      run: |
        echo "🚀 Updating Kubernetes deployments..."
        
        # Обновляем backend deployment
        kubectl set image deployment/devops-backend-deployment devops-backend=${{ env.BACKEND_IMAGE }}
        
        # Обновляем frontend deployment  
        kubectl set image deployment/devops-frontend-deployment devops-frontend=${{ env.FRONTEND_IMAGE }}
        
        # Ожидаем завершения rollout
        echo "⏳ Waiting for deployments to rollout..."
        kubectl rollout status deployment/devops-backend-deployment --timeout=600s
        kubectl rollout status deployment/devops-frontend-deployment --timeout=600s
        
        echo "✅ Deployments updated successfully"

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment status..."
        
        # Проверяем статус подов
        kubectl get pods -l app=devops-backend
        kubectl get pods -l app=devops-frontend
        
        # Проверяем сервисы
        kubectl get services
        
        # Получаем LoadBalancer IP (если есть)
        FRONTEND_IP=$(kubectl get service devops-frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
        
        echo "🌐 Frontend LoadBalancer IP: ${FRONTEND_IP}"
        
        # Проверяем готовность подов
        kubectl wait --for=condition=ready pod -l app=devops-backend --timeout=300s
        kubectl wait --for=condition=ready pod -l app=devops-frontend --timeout=300s
        
        echo "✅ All pods are ready"

    - name: Health checks
      run: |
        echo "🏥 Running health checks..."
        
        # Проверяем health endpoint бэкенда через port-forward
        kubectl port-forward deployment/devops-backend-deployment 8080:8080 &
        PORT_FORWARD_PID=$!
        
        # Ждем немного для установки соединения
        sleep 5
        
        # Проверяем health endpoint
        if curl -f -s http://localhost:8080/actuator/health > /dev/null; then
          echo "✅ Backend health check passed"
        else
          echo "⚠️ Backend health check failed"
        fi
        
        # Останавливаем port-forward
        kill $PORT_FORWARD_PID 2>/dev/null || true
        
        echo "✅ Health checks completed"

    - name: Update deployment summary
      if: always()
      run: |
        echo "## 📊 Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Статус деплоймента
        if [ "${{ job.status }}" = "success" ]; then
          echo "### ✅ Deployment Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Deployment Status: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster ID**: ${{ needs.pre-deployment-checks.outputs.cluster-id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Image**: \`${{ env.BACKEND_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Image**: \`${{ env.FRONTEND_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        
        # Статус подов
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏃‍♂️ Pod Status" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        kubectl get pods -l "app in (devops-backend,devops-frontend)" || echo "Failed to get pod status" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        docker system prune -f || true
        echo "✅ Cleanup completed"
