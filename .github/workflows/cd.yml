name: Continuous Deployment

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: '–û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: '–í–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è latest)'
        required: false
        type: string

env:
  DOCKER_REGISTRY: 'docker.io'
  DOCKER_BUILDKIT: 1

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      deploy-environment: ${{ steps.determine-env.outputs.environment }}
      deploy-version: ${{ steps.determine-version.outputs.version }}
      should-deploy: ${{ steps.checks.outputs.should-deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine deployment environment
      id: determine-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
        else
          # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ staging –¥–ª—è main –≤–µ—Ç–∫–∏
          ENVIRONMENT="staging"
        fi
        echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
        echo "üéØ Target environment: ${ENVIRONMENT}"

    - name: Determine deployment version
      id: determine-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º SHA –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π
          VERSION="latest"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "üì¶ Deploy version: ${VERSION}"

    - name: Run pre-deployment checks
      id: checks
      run: |
        echo "üîç Running pre-deployment checks..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
        MISSING_SECRETS=""
        
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} DOCKER_USERNAME"
        fi
        
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} DOCKER_PASSWORD"
        fi
        
        if [ -z "${{ secrets.KUBE_CONFIG }}" ]; then
          MISSING_SECRETS="${MISSING_SECRETS} KUBE_CONFIG"
        fi
        
        if [ -n "$MISSING_SECRETS" ]; then
          echo "‚ùå Missing required secrets:${MISSING_SECRETS}"
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "‚úÖ All pre-deployment checks passed"
        echo "should-deploy=true" >> $GITHUB_OUTPUT

    - name: Update deployment summary
      run: |
        echo "## üöÄ Deployment Plan" >> $GITHUB_STEP_SUMMARY
        echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | \`${{ steps.determine-env.outputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Version | \`${{ steps.determine-version.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY

  # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Kubernetes
  deploy-to-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    environment: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
        kubectl get nodes

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Prepare Kubernetes manifests
      run: |
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
        mkdir -p k8s-deploy
        
        # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã
        cp terraform/k8s-manifests.yaml k8s-deploy/
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑—ã –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ö
        VERSION="${{ needs.pre-deployment-checks.outputs.deploy-version }}"
        DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
        
        sed -i "s|utsx/devops-backend:latest|${DOCKER_USERNAME}/devops-backend:${VERSION}|g" k8s-deploy/k8s-manifests.yaml
        sed -i "s|utsx/devops-frontend:latest|${DOCKER_USERNAME}/devops-frontend:${VERSION}|g" k8s-deploy/k8s-manifests.yaml
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        DEPLOYMENT_ID="deploy-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}"
        echo "DEPLOYMENT_ID=${DEPLOYMENT_ID}" >> $GITHUB_ENV
        
        echo "üì¶ Prepared manifests for deployment ${DEPLOYMENT_ID}"

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        
        echo "üöÄ Deploying to Kubernetes cluster..."
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã
        kubectl apply -f k8s-deploy/k8s-manifests.yaml
        
        echo "‚úÖ Manifests applied successfully"

    - name: Wait for deployment rollout
      run: |
        export KUBECONFIG=kubeconfig
        
        echo "‚è≥ Waiting for deployments to complete..."
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è backend
        kubectl rollout status deployment/devops-backend -n devops-app --timeout=600s
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è frontend
        kubectl rollout status deployment/devops-frontend -n devops-app --timeout=600s
        
        echo "‚úÖ All deployments completed successfully"

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        echo "üîç Verifying deployment..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤
        kubectl get pods -n devops-app -o wide
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
        kubectl get services -n devops-app
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
        EXTERNAL_IP=$(kubectl get service devops-frontend-service -n devops-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
        echo "EXTERNAL_IP=${EXTERNAL_IP}" >> $GITHUB_ENV
        
        echo "‚úÖ Deployment verification completed"

    - name: Update deployment summary
      run: |
        export KUBECONFIG=kubeconfig
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üéâ Deployment Completed" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # –°—Ç–∞—Ç—É—Å backend
        BACKEND_STATUS=$(kubectl get deployment devops-backend -n devops-app -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
        if [ "$BACKEND_STATUS" = "True" ]; then
          echo "| Backend | ‚úÖ Running | Deployment successful |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Backend | ‚ùå Failed | Check logs for details |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # –°—Ç–∞—Ç—É—Å frontend
        FRONTEND_STATUS=$(kubectl get deployment devops-frontend -n devops-app -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
        if [ "$FRONTEND_STATUS" = "True" ]; then
          echo "| Frontend | ‚úÖ Running | Deployment successful |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Frontend | ‚ùå Failed | Check logs for details |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        DB_STATUS=$(kubectl get deployment postgres -n devops-app -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
        if [ "$DB_STATUS" = "True" ]; then
          echo "| Database | ‚úÖ Running | PostgreSQL ready |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Database | ‚ùå Failed | Check logs for details |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Access Information" >> $GITHUB_STEP_SUMMARY
        if [ "${{ env.EXTERNAL_IP }}" != "pending" ] && [ -n "${{ env.EXTERNAL_IP }}" ]; then
          echo "- **Application URL**: http://${{ env.EXTERNAL_IP }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Application URL**: External IP is being assigned..." >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Environment**: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.pre-deployment-checks.outputs.deploy-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment ID**: ${{ env.DEPLOYMENT_ID }}" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        rm -f kubeconfig
        rm -rf k8s-deploy

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  notify-deployment-result:
    name: Notify Deployment Result
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-to-kubernetes]
    if: always() && needs.pre-deployment-checks.outputs.should-deploy == 'true'
    
    steps:
    - name: Determine deployment status
      id: status
      run: |
        if [ "${{ needs.deploy-to-kubernetes.result }}" = "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=‚úÖ Deployment completed successfully" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=‚ùå Deployment failed" >> $GITHUB_OUTPUT
        fi

    - name: Create deployment summary
      run: |
        echo "## üìä Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ needs.pre-deployment-checks.outputs.deploy-version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.status.outputs.status }}" = "success" ]; then
          echo "üéâ **The application has been successfully deployed and is ready for use!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "üîß **Please check the deployment logs and fix any issues before retrying.**" >> $GITHUB_STEP_SUMMARY
        fi