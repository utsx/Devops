name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'docker.io'
  DOCKER_BUILDKIT: 1
  SONAR_ORGANIZATION: 'utsx'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à organization key –≤ SonarCloud
  SONAR_PROJECT_KEY: 'utsx_Devops'

jobs:
  # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
  build:
    name: Build Applications
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Backend —Å–±–æ—Ä–∫–∞
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build backend application
      run: |
        cd backend
        ./mvnw clean package -DskipTests
        echo "Backend JAR built successfully"
        ls -la target/*.jar

    # Frontend —Å–±–æ—Ä–∫–∞
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Build frontend application
      run: |
        cd frontend
        npm run build
        echo "Frontend build completed successfully"
        ls -la build/

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    - name: Upload backend JAR
      uses: actions/upload-artifact@v4
      with:
        name: backend-application
        path: backend/target/*.jar
        retention-days: 7

    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-application
        path: frontend/build/
        retention-days: 7

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    - name: Create release archive
      run: |
        mkdir -p release
        cp backend/target/*.jar release/
        cp -r frontend/build release/frontend-build
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –≤–µ—Ä—Å–∏–µ–π
        VERSION=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}
        tar -czf release-${VERSION}.tar.gz -C release .
        
        echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV
        echo "Release archive created: release-${VERSION}.tar.gz"

    - name: Upload release archive
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ env.RELEASE_VERSION }}
        path: release-${{ env.RELEASE_VERSION }}.tar.gz
        retention-days: 30

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    - name: Verify build artifacts
      run: |
        echo "=== Backend JAR Info ==="
        BACKEND_JAR=$(find backend/target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar")
        if [ -f "$BACKEND_JAR" ]; then
          echo "‚úÖ Backend JAR found: $(basename $BACKEND_JAR)"
          echo "üì¶ Size: $(du -h $BACKEND_JAR | cut -f1)"
          echo "üîç JAR contents:"
          jar -tf "$BACKEND_JAR" | head -10
          echo "..."
        else
          echo "‚ùå Backend JAR not found!"
          exit 1
        fi
        
        echo ""
        echo "=== Frontend Build Info ==="
        if [ -d "frontend/build" ]; then
          echo "‚úÖ Frontend build directory found"
          echo "üì¶ Size: $(du -sh frontend/build | cut -f1)"
          echo "üìÅ Contents:"
          find frontend/build -type f -name "*.js" -o -name "*.css" -o -name "*.html" | head -10
        else
          echo "‚ùå Frontend build directory not found!"
          exit 1
        fi

    - name: Update build summary
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üèóÔ∏è Application Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Artifact |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        
        BACKEND_JAR=$(find backend/target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar")
        BACKEND_SIZE=$(du -h "$BACKEND_JAR" | cut -f1)
        FRONTEND_SIZE=$(du -sh frontend/build | cut -f1)
        
        echo "| Backend | ‚úÖ Built | JAR ($BACKEND_SIZE) |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ‚úÖ Built | Static files ($FRONTEND_SIZE) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend JAR**: \`$(basename $BACKEND_JAR)\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Build**: Static files ready for deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Archive**: \`release-${{ env.RELEASE_VERSION }}.tar.gz\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Ready for Deployment" >> $GITHUB_STEP_SUMMARY
        echo "All application artifacts are built and ready for deployment to production environment." >> $GITHUB_STEP_SUMMARY

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
  backend-test:
    name: Backend Tests & Coverage Check
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-application
        path: backend/target/

    - name: Run backend tests with coverage
      run: |
        cd backend
        echo "üß™ Running backend tests with JaCoCo coverage..."
        ./mvnw clean test jacoco:report
      env:
        # Testcontainers —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Docker
        TESTCONTAINERS_RYUK_DISABLED: true
        TESTCONTAINERS_CHECKS_DISABLE: true
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è fallback, –µ—Å–ª–∏ Testcontainers –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/postgres
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres

    - name: ‚ö†Ô∏è MANDATORY Coverage Check - 80% Required
      run: |
        cd backend
        echo "üîç Verifying code coverage meets 80% threshold..."
        echo "‚ùå BUILD WILL FAIL if coverage is below 80%"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º JaCoCo check —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        ./mvnw jacoco:check
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, coverage –ø—Ä–æ—à–µ–ª
        echo "‚úÖ Backend coverage check PASSED - meets 80% requirement"
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
        if [ -f "target/site/jacoco/index.html" ]; then
          echo "üìä Coverage report generated successfully"
          echo "üîó Report location: backend/target/site/jacoco/index.html"
        fi

    - name: Upload backend coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-reports
        path: |
          backend/target/site/jacoco/
          backend/target/surefire-reports/
        retention-days: 30

    - name: OWASP Dependency Check
      run: |
        cd backend
        echo "üîç Running OWASP Dependency Check for security vulnerabilities..."
        ./mvnw org.owasp:dependency-check-maven:check -Dformat=ALL || true
        echo "‚úÖ OWASP dependency check completed"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-security-reports
        path: backend/target/dependency-check-report.*
        retention-days: 30

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
  frontend-test:
    name: Frontend Tests & Coverage Check
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
          # –°–æ–∑–¥–∞–µ–º package-lock.json –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          if [ -n "$(git status --porcelain package-lock.json 2>/dev/null)" ]; then
            echo "package-lock.json –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –∫–æ–º–º–∏—Ç–∏–º –µ–≥–æ –≤ CI"
          fi
        fi

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-application
        path: frontend/build/

    - name: Run frontend tests with coverage
      run: |
        cd frontend
        echo "üß™ Running frontend tests with coverage..."
        npm run test:coverage
      env:
        CI: true

    - name: ‚ö†Ô∏è MANDATORY Coverage Check - 80% Required
      run: |
        cd frontend
        echo "üîç Verifying frontend coverage meets 80% threshold..."
        echo "‚ùå BUILD WILL FAIL if coverage is below 80%"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
        if [ ! -d "coverage" ]; then
          echo "‚ùå Coverage directory not found - tests may have failed"
          exit 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º coverage-summary.json –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        if [ -f "coverage/coverage-summary.json" ]; then
          # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–æ–∫
          line_coverage=$(node -p "
            const coverage = JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8'));
            coverage.total.lines.pct;
          ")
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –≤–µ—Ç–≤–ª–µ–Ω–∏–π
          branch_coverage=$(node -p "
            const coverage = JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8'));
            coverage.total.branches.pct;
          ")
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–π
          function_coverage=$(node -p "
            const coverage = JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8'));
            coverage.total.functions.pct;
          ")
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è statements
          statement_coverage=$(node -p "
            const coverage = JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8'));
            coverage.total.statements.pct;
          ")
          
          echo "üìä Frontend Coverage Results:"
          echo "  ‚Ä¢ Lines: $line_coverage%"
          echo "  ‚Ä¢ Branches: $branch_coverage%"
          echo "  ‚Ä¢ Functions: $function_coverage%"
          echo "  ‚Ä¢ Statements: $statement_coverage%"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è
          THRESHOLD=80
          FAILED=""
          
          if (( $(echo "$line_coverage < $THRESHOLD" | bc -l) )); then
            echo "‚ùå Line coverage ($line_coverage%) is below $THRESHOLD%"
            FAILED="true"
          fi
          
          if (( $(echo "$branch_coverage < $THRESHOLD" | bc -l) )); then
            echo "‚ùå Branch coverage ($branch_coverage%) is below $THRESHOLD%"
            FAILED="true"
          fi
          
          if (( $(echo "$function_coverage < $THRESHOLD" | bc -l) )); then
            echo "‚ùå Function coverage ($function_coverage%) is below $THRESHOLD%"
            FAILED="true"
          fi
          
          if (( $(echo "$statement_coverage < $THRESHOLD" | bc -l) )); then
            echo "‚ùå Statement coverage ($statement_coverage%) is below $THRESHOLD%"
            FAILED="true"
          fi
          
          if [ "$FAILED" = "true" ]; then
            echo ""
            echo "üö´ FRONTEND COVERAGE CHECK FAILED"
            echo "‚ùå One or more coverage metrics are below the required 80% threshold"
            echo "üîß Please add more tests to improve code coverage"
            exit 1
          else
            echo "‚úÖ Frontend coverage check PASSED - all metrics meet 80% requirement"
          fi
          
        else
          echo "‚ùå Coverage summary not found - unable to verify coverage"
          exit 1
        fi

    - name: Frontend Security Audit
      run: |
        cd frontend
        echo "üîç Running npm security audit..."
        # –ó–∞–ø—É—Å–∫–∞–µ–º audit, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –Ω–∏–∑–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
        npm audit --audit-level=high || echo "‚ö†Ô∏è Security audit found issues - please review"
        echo "‚úÖ Frontend security audit completed"

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
        retention-days: 30

  # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
          # –°–æ–∑–¥–∞–µ–º package-lock.json –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          if [ -n "$(git status --porcelain package-lock.json 2>/dev/null)" ]; then
            echo "package-lock.json –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –∫–æ–º–º–∏—Ç–∏–º –µ–≥–æ –≤ CI"
          fi
        fi

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

    - name: Display build summary
      run: |
        echo "## üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "Frontend coverage reports are available in artifacts." >> $GITHUB_STEP_SUMMARY

  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –≠–¢–ê–ü: SonarCloud –∞–Ω–∞–ª–∏–∑ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  security-scan:
    name: üîê SonarCloud Security & Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # –û—Ç–∫–ª—é—á–∞–µ–º shallow clone –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Download backend coverage reports
      uses: actions/download-artifact@v4
      with:
        name: backend-coverage-reports
        path: backend/target/site/jacoco/

    - name: Download frontend coverage reports
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

    - name: Prepare backend for SonarCloud analysis
      run: |
        cd backend
        echo "üîß Preparing backend for SonarCloud analysis..."
        ./mvnw clean compile test jacoco:report
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/postgres
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres

    - name: Prepare frontend for SonarCloud analysis
      run: |
        cd frontend
        echo "üîß Preparing frontend for SonarCloud analysis..."
        npm run test:coverage
      env:
        CI: true

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: üîç Run SonarCloud Analysis
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: ‚ö†Ô∏è CRITICAL Quality Gate Check
      uses: SonarSource/sonarqube-quality-gate-action@master
      timeout-minutes: 10
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: üîç Advanced Security Analysis
      run: |
        echo "üîç Running advanced security checks..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend –Ω–∞ –≤—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        cd backend
        echo "üîß Checking backend dependencies for critical vulnerabilities..."
        ./mvnw org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7 || {
          echo "‚ùå Critical security vulnerabilities found in backend dependencies"
          echo "üîß Please update dependencies or add suppressions"
          exit 1
        }
        
        cd ..
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend –Ω–∞ –≤—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        cd frontend
        echo "üîß Checking frontend dependencies for critical vulnerabilities..."
        npm audit --audit-level=high || {
          echo "‚ö†Ô∏è High-level security issues found in frontend dependencies"
          echo "üîß Please run 'npm audit fix' to resolve issues"
          # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É –¥–ª—è frontend audit, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        }
        
        echo "‚úÖ Advanced security analysis completed"

    - name: üìä Verify SonarCloud Metrics
      run: |
        echo "üìä Verifying SonarCloud quality metrics..."
        echo "‚ö†Ô∏è This step will fail if any of the following conditions are not met:"
        echo "  ‚Ä¢ Code coverage < 80%"
        echo "  ‚Ä¢ New bugs found"
        echo "  ‚Ä¢ New vulnerabilities found"
        echo "  ‚Ä¢ Security rating worse than A"
        echo "  ‚Ä¢ Maintainability rating worse than A"
        echo "  ‚Ä¢ Reliability rating worse than A"
        echo ""
        echo "üîó Check detailed results at: https://sonarcloud.io/project/overview?id=${{ env.SONAR_PROJECT_KEY }}"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–∞–ø–µ SonarCloud –∫–∞—á–µ—Å—Ç–≤–∞
        echo "‚úÖ If this step passes, all SonarCloud quality gates have been met"

    - name: üõ°Ô∏è Final Security Validation
      run: |
        echo "üõ°Ô∏è Running final security validation..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        echo "üîç Checking for exposed secrets or sensitive files..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        DANGEROUS_FILES=$(find . -name "*.key" -o -name "*.pem" -o -name ".env" -o -name "secrets.yml" -o -name "credentials.json" | head -10)
        
        if [ -n "$DANGEROUS_FILES" ]; then
          echo "‚ö†Ô∏è Potentially sensitive files found:"
          echo "$DANGEROUS_FILES"
          echo "üîß Please ensure these files don't contain real secrets"
        else
          echo "‚úÖ No obviously sensitive files found"
        fi
        
        echo "‚úÖ Security validation completed"

    - name: Update security scan summary
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üîí Security & Quality Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Requirement |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|------------|" >> $GITHUB_STEP_SUMMARY
        echo "| SonarCloud Analysis | ‚úÖ Passed | Code quality analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| Quality Gate | ‚úÖ Passed | Coverage ‚â•80%, No bugs/vulnerabilities |" >> $GITHUB_STEP_SUMMARY
        echo "| OWASP Dependency Check | ‚úÖ Passed | No critical vulnerabilities |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Security Audit | ‚úÖ Completed | High-level issues checked |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Quality Standards Met" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Code Coverage**: ‚â•80% for both backend and frontend" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Security Rating**: A (no vulnerabilities)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Maintainability**: A (clean code)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Reliability**: A (no bugs)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Dependencies**: No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Resources" >> $GITHUB_STEP_SUMMARY
        echo "- [SonarCloud Dashboard](https://sonarcloud.io/project/overview?id=${{ env.SONAR_PROJECT_KEY }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Coverage Reports](../../actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Security Reports](../../actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  # –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –í–°–ï–• –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞)
  docker-build-push:
    name: üê≥ Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [build, backend-test, frontend-test, code-quality, security-scan]
    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏ –∏ —Ç–µ–≥–æ–≤ –ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-application
        path: backend/target/

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-application
        path: frontend/build/

    - name: Generate image tags
      id: meta
      run: |
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          VERSION="latest"
        else
          VERSION="dev-${GITHUB_SHA:0:7}"
        fi
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤
        BACKEND_IMAGE="${DOCKER_REGISTRY}/${GITHUB_REPOSITORY_OWNER}/devops-backend"
        FRONTEND_IMAGE="${DOCKER_REGISTRY}/${GITHUB_REPOSITORY_OWNER}/devops-frontend"
        
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "BACKEND_IMAGE=${BACKEND_IMAGE}" >> $GITHUB_OUTPUT
        echo "FRONTEND_IMAGE=${FRONTEND_IMAGE}" >> $GITHUB_OUTPUT
        echo "BACKEND_TAGS=${BACKEND_IMAGE}:${VERSION},${BACKEND_IMAGE}:latest" >> $GITHUB_OUTPUT
        echo "FRONTEND_TAGS=${FRONTEND_IMAGE}:${VERSION},${FRONTEND_IMAGE}:latest" >> $GITHUB_OUTPUT
        
        echo "üè∑Ô∏è Generated tags:"
        echo "Backend: ${BACKEND_IMAGE}:${VERSION}, ${BACKEND_IMAGE}:latest"
        echo "Frontend: ${FRONTEND_IMAGE}:${VERSION}, ${FRONTEND_IMAGE}:latest"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.BACKEND_TAGS }}
        labels: |
          org.opencontainers.image.title=DevOps Backend
          org.opencontainers.image.description=Spring Boot backend application
          org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.FRONTEND_TAGS }}
        labels: |
          org.opencontainers.image.title=DevOps Frontend
          org.opencontainers.image.description=React frontend application with nginx
          org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Verify pushed images
      run: |
        echo "üîç Verifying pushed images..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend –æ–±—Ä–∞–∑
        docker pull ${{ steps.meta.outputs.BACKEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}
        BACKEND_SIZE=$(docker images --format "table {{.Size}}" ${{ steps.meta.outputs.BACKEND_IMAGE }}:${{ steps.meta.outputs.VERSION }} | tail -n 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend –æ–±—Ä–∞–∑
        docker pull ${{ steps.meta.outputs.FRONTEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}
        FRONTEND_SIZE=$(docker images --format "table {{.Size}}" ${{ steps.meta.outputs.FRONTEND_IMAGE }}:${{ steps.meta.outputs.VERSION }} | tail -n 1)
        
        echo "‚úÖ Backend image verified: ${{ steps.meta.outputs.BACKEND_IMAGE }}:${{ steps.meta.outputs.VERSION }} (${BACKEND_SIZE})"
        echo "‚úÖ Frontend image verified: ${{ steps.meta.outputs.FRONTEND_IMAGE }}:${{ steps.meta.outputs.VERSION }} (${FRONTEND_SIZE})"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è summary
        echo "BACKEND_SIZE=${BACKEND_SIZE}" >> $GITHUB_ENV
        echo "FRONTEND_SIZE=${FRONTEND_SIZE}" >> $GITHUB_ENV

    - name: Update Docker images summary
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üê≥ Docker Images Published" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Image | Version | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|---------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | \`${{ steps.meta.outputs.BACKEND_IMAGE }}\` | \`${{ steps.meta.outputs.VERSION }}\` | ${{ env.BACKEND_SIZE }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | \`${{ steps.meta.outputs.FRONTEND_IMAGE }}\` | \`${{ steps.meta.outputs.VERSION }}\` | ${{ env.FRONTEND_SIZE }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Deployment Commands" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull images" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ steps.meta.outputs.BACKEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ steps.meta.outputs.FRONTEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Deploy with docker-compose" >> $GITHUB_STEP_SUMMARY
        echo "export BACKEND_VERSION=${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "export FRONTEND_VERSION=${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "export DOCKER_USERNAME=${{ github.repository_owner }}" >> $GITHUB_STEP_SUMMARY
        echo "docker-compose -f docker-compose.prod.yml up -d" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Image Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.DOCKER_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: ${{ github.repository_owner }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

    - name: Create deployment artifact
      run: |
        mkdir -p deployment
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è
        cat > deployment/.env.deploy << EOF
        # Generated deployment configuration
        # Build: ${{ github.sha }}
        # Version: ${{ steps.meta.outputs.VERSION }}
        # Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
        DOCKER_USERNAME=${{ github.repository_owner }}
        BACKEND_VERSION=${{ steps.meta.outputs.VERSION }}
        FRONTEND_VERSION=${{ steps.meta.outputs.VERSION }}
        
        # Application ports
        FRONTEND_PORT=3000
        BACKEND_PORT=8080
        POSTGRES_PORT=5432
        
        # Database configuration (update with your values)
        POSTGRES_DB=postgres
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=your-secure-password
        EOF
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Deploying DevOps application..."
        echo "Version: ${{ steps.meta.outputs.VERSION }}"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if [ -f .env.deploy ]; then
            export $(cat .env.deploy | grep -v '^#' | xargs)
        fi
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        docker-compose -f docker-compose.prod.yml down || true
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
        docker pull ${{ steps.meta.outputs.BACKEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}
        docker pull ${{ steps.meta.outputs.FRONTEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        docker-compose -f docker-compose.prod.yml --env-file .env.deploy up -d
        
        echo "‚úÖ Deployment completed!"
        echo "Backend: http://localhost:${BACKEND_PORT:-8080}"
        echo "Frontend: http://localhost:${FRONTEND_PORT:-3000}"
        EOF
        
        chmod +x deployment/deploy.sh
        
        echo "üì¶ Deployment artifacts created:"
        ls -la deployment/

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-${{ steps.meta.outputs.VERSION }}
        path: deployment/
        retention-days: 30

  # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
  pipeline-success:
    name: ‚úÖ Pipeline Success Validation
    runs-on: ubuntu-latest
    needs: [build, backend-test, frontend-test, code-quality, security-scan, docker-build-push]
    if: always()
    
    steps:
    - name: üîç Validate Pipeline Results
      run: |
        echo "üîç Validating all pipeline stages..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç—Ç–∞–ø–æ–≤
        BUILD_RESULT="${{ needs.build.result }}"
        BACKEND_TEST_RESULT="${{ needs.backend-test.result }}"
        FRONTEND_TEST_RESULT="${{ needs.frontend-test.result }}"
        CODE_QUALITY_RESULT="${{ needs.code-quality.result }}"
        SECURITY_SCAN_RESULT="${{ needs.security-scan.result }}"
        DOCKER_BUILD_RESULT="${{ needs.docker-build-push.result }}"
        
        echo "üìä Pipeline Results Summary:"
        echo "  ‚Ä¢ Build: $BUILD_RESULT"
        echo "  ‚Ä¢ Backend Tests & Coverage: $BACKEND_TEST_RESULT"
        echo "  ‚Ä¢ Frontend Tests & Coverage: $FRONTEND_TEST_RESULT"
        echo "  ‚Ä¢ Code Quality Analysis: $CODE_QUALITY_RESULT"
        echo "  ‚Ä¢ SonarCloud Security Scan: $SECURITY_SCAN_RESULT"
        echo "  ‚Ä¢ Docker Build & Push: $DOCKER_BUILD_RESULT"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç—Ç–∞–ø—ã
        FAILED_STAGES=""
        
        if [ "$BUILD_RESULT" != "success" ]; then
          FAILED_STAGES="$FAILED_STAGES Build"
        fi
        
        if [ "$BACKEND_TEST_RESULT" != "success" ]; then
          FAILED_STAGES="$FAILED_STAGES Backend-Tests"
        fi
        
        if [ "$FRONTEND_TEST_RESULT" != "success" ]; then
          FAILED_STAGES="$FAILED_STAGES Frontend-Tests"
        fi
        
        if [ "$CODE_QUALITY_RESULT" != "success" ]; then
          FAILED_STAGES="$FAILED_STAGES Code-Quality"
        fi
        
        if [ "$SECURITY_SCAN_RESULT" != "success" ]; then
          FAILED_STAGES="$FAILED_STAGES Security-Scan"
        fi
        
        # Docker build –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω –¥–ª—è non-main –≤–µ—Ç–æ–∫
        if [ "${{ github.ref }}" == "refs/heads/main" ] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
          if [ "$DOCKER_BUILD_RESULT" != "success" ] && [ "$DOCKER_BUILD_RESULT" != "skipped" ]; then
            FAILED_STAGES="$FAILED_STAGES Docker-Build"
          fi
        fi
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if [ -n "$FAILED_STAGES" ]; then
          echo ""
          echo "üö´ PIPELINE FAILED"
          echo "‚ùå Failed stages:$FAILED_STAGES"
          echo ""
          echo "üí° Failure Analysis:"
          echo "   ‚Ä¢ Check logs for each failed stage above"
          echo "   ‚Ä¢ Ensure code coverage is ‚â•80% for both backend and frontend"
          echo "   ‚Ä¢ Fix any bugs or security vulnerabilities found by SonarCloud"
          echo "   ‚Ä¢ Resolve any OWASP dependency check failures"
          echo "   ‚Ä¢ All tests must pass before deployment"
          echo ""
          echo "üîó Resources:"
          echo "   ‚Ä¢ SonarCloud: https://sonarcloud.io/project/overview?id=${{ env.SONAR_PROJECT_KEY }}"
          echo "   ‚Ä¢ GitHub Actions Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          exit 1
        else
          echo ""
          echo "üéâ PIPELINE SUCCESS!"
          echo "‚úÖ All quality gates passed successfully"
          echo ""
          echo "üéØ Achievements:"
          echo "   ‚úÖ Code built and tested successfully"
          echo "   ‚úÖ Code coverage ‚â•80% (Backend & Frontend)"
          echo "   ‚úÖ No security vulnerabilities found"
          echo "   ‚úÖ SonarCloud quality gate passed"
          echo "   ‚úÖ All tests passing"
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "   ‚úÖ Docker images built and published"
          fi
          echo ""
          echo "üöÄ Code is ready for deployment!"
        fi

    - name: üìä Generate Final Report
      if: always()
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# üéØ CI/CD Pipeline Final Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        BUILD_RESULT="${{ needs.build.result }}"
        BACKEND_TEST_RESULT="${{ needs.backend-test.result }}"
        FRONTEND_TEST_RESULT="${{ needs.frontend-test.result }}"
        CODE_QUALITY_RESULT="${{ needs.code-quality.result }}"
        SECURITY_SCAN_RESULT="${{ needs.security-scan.result }}"
        DOCKER_BUILD_RESULT="${{ needs.docker-build-push.result }}"
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        SUCCESS_COUNT=0
        TOTAL_COUNT=5  # –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –±–µ–∑ —É—á–µ—Ç–∞ docker build
        
        [ "$BUILD_RESULT" == "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "$BACKEND_TEST_RESULT" == "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "$FRONTEND_TEST_RESULT" == "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "$CODE_QUALITY_RESULT" == "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "$SECURITY_SCAN_RESULT" == "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        
        if [ "$SUCCESS_COUNT" -eq "$TOTAL_COUNT" ]; then
          echo "## ‚úÖ Pipeline Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ùå Pipeline Status: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Stage Results" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status | Description |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ emoji
        get_status_emoji() {
          case "$1" in
            "success") echo "‚úÖ" ;;
            "failure") echo "‚ùå" ;;
            "cancelled") echo "‚è∏Ô∏è" ;;
            "skipped") echo "‚è≠Ô∏è" ;;
            *) echo "‚ùì" ;;
          esac
        }
        
        echo "| üèóÔ∏è Build | $(get_status_emoji "$BUILD_RESULT") $BUILD_RESULT | Application compilation |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚òï Backend Tests | $(get_status_emoji "$BACKEND_TEST_RESULT") $BACKEND_TEST_RESULT | Java tests + 80% coverage |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚öõÔ∏è Frontend Tests | $(get_status_emoji "$FRONTEND_TEST_RESULT") $FRONTEND_TEST_RESULT | React tests + 80% coverage |" >> $GITHUB_STEP_SUMMARY
        echo "| üìä Code Quality | $(get_status_emoji "$CODE_QUALITY_RESULT") $CODE_QUALITY_RESULT | Code analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| üîê Security Scan | $(get_status_emoji "$SECURITY_SCAN_RESULT") $SECURITY_SCAN_RESULT | SonarCloud + OWASP + vulnerabilities |" >> $GITHUB_STEP_SUMMARY
        echo "| üê≥ Docker Build | $(get_status_emoji "$DOCKER_BUILD_RESULT") $DOCKER_BUILD_RESULT | Container images |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Quality Standards" >> $GITHUB_STEP_SUMMARY
        echo "This pipeline enforces the following strict quality standards:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Coverage**: Minimum 80% for both backend and frontend" >> $GITHUB_STEP_SUMMARY
        echo "- **Security**: No high/critical vulnerabilities allowed" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: SonarCloud Quality Gate must pass" >> $GITHUB_STEP_SUMMARY
        echo "- **Testing**: All unit and integration tests must pass" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependencies**: OWASP security check for all dependencies" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìà Metrics ($SUCCESS_COUNT/$TOTAL_COUNT passed)" >> $GITHUB_STEP_SUMMARY
        echo "- **Success Rate**: $((SUCCESS_COUNT * 100 / TOTAL_COUNT))%" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: ~${{ github.run_number }} builds completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Resources" >> $GITHUB_STEP_SUMMARY
        echo "- [SonarCloud Dashboard](https://sonarcloud.io/project/overview?id=${{ env.SONAR_PROJECT_KEY }})" >> $GITHUB_STEP_SUMMARY
        echo "- [GitHub Actions Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Repository](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
        
        if [ "$SUCCESS_COUNT" -eq "$TOTAL_COUNT" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**üöÄ Ready for Production Deployment!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**‚ö†Ô∏è Quality Gates Failed - Deployment Blocked**" >> $GITHUB_STEP_SUMMARY
        fi