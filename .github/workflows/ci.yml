name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'docker.io'
  DOCKER_BUILDKIT: 1
  SONAR_ORGANIZATION: 'utsx'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à organization key –≤ SonarCloud
  SONAR_PROJECT_KEY: 'devops-application'

jobs:
  # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
  build:
    name: Build Applications
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Backend —Å–±–æ—Ä–∫–∞
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build backend application
      run: |
        cd backend
        ./mvnw clean package -DskipTests
        echo "Backend JAR built successfully"
        ls -la target/*.jar

    # Frontend —Å–±–æ—Ä–∫–∞
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Build frontend application
      run: |
        cd frontend
        npm run build
        echo "Frontend build completed successfully"
        ls -la build/

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    - name: Upload backend JAR
      uses: actions/upload-artifact@v4
      with:
        name: backend-application
        path: backend/target/*.jar
        retention-days: 7

    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-application
        path: frontend/build/
        retention-days: 7

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    - name: Create release archive
      run: |
        mkdir -p release
        cp backend/target/*.jar release/
        cp -r frontend/build release/frontend-build
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –≤–µ—Ä—Å–∏–µ–π
        VERSION=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}
        tar -czf release-${VERSION}.tar.gz -C release .
        
        echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV
        echo "Release archive created: release-${VERSION}.tar.gz"

    - name: Upload release archive
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ env.RELEASE_VERSION }}
        path: release-${{ env.RELEASE_VERSION }}.tar.gz
        retention-days: 30

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    - name: Verify build artifacts
      run: |
        echo "=== Backend JAR Info ==="
        BACKEND_JAR=$(find backend/target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar")
        if [ -f "$BACKEND_JAR" ]; then
          echo "‚úÖ Backend JAR found: $(basename $BACKEND_JAR)"
          echo "üì¶ Size: $(du -h $BACKEND_JAR | cut -f1)"
          echo "üîç JAR contents:"
          jar -tf "$BACKEND_JAR" | head -10
          echo "..."
        else
          echo "‚ùå Backend JAR not found!"
          exit 1
        fi
        
        echo ""
        echo "=== Frontend Build Info ==="
        if [ -d "frontend/build" ]; then
          echo "‚úÖ Frontend build directory found"
          echo "üì¶ Size: $(du -sh frontend/build | cut -f1)"
          echo "üìÅ Contents:"
          find frontend/build -type f -name "*.js" -o -name "*.css" -o -name "*.html" | head -10
        else
          echo "‚ùå Frontend build directory not found!"
          exit 1
        fi

    - name: Update build summary
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üèóÔ∏è Application Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Artifact |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        
        BACKEND_JAR=$(find backend/target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar")
        BACKEND_SIZE=$(du -h "$BACKEND_JAR" | cut -f1)
        FRONTEND_SIZE=$(du -sh frontend/build | cut -f1)
        
        echo "| Backend | ‚úÖ Built | JAR ($BACKEND_SIZE) |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ‚úÖ Built | Static files ($FRONTEND_SIZE) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend JAR**: \`$(basename $BACKEND_JAR)\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Build**: Static files ready for deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Archive**: \`release-${{ env.RELEASE_VERSION }}.tar.gz\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Ready for Deployment" >> $GITHUB_STEP_SUMMARY
        echo "All application artifacts are built and ready for deployment to production environment." >> $GITHUB_STEP_SUMMARY

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-application
        path: backend/target/

    - name: Run backend tests
      run: |
        cd backend
        ./mvnw clean test
      env:
        # Testcontainers —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Docker
        TESTCONTAINERS_RYUK_DISABLED: true
        TESTCONTAINERS_CHECKS_DISABLE: true
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è fallback, –µ—Å–ª–∏ Testcontainers –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/postgres
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
          # –°–æ–∑–¥–∞–µ–º package-lock.json –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          if [ -n "$(git status --porcelain package-lock.json 2>/dev/null)" ]; then
            echo "package-lock.json –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –∫–æ–º–º–∏—Ç–∏–º –µ–≥–æ –≤ CI"
          fi
        fi

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-application
        path: frontend/build/

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:coverage

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

  # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
          # –°–æ–∑–¥–∞–µ–º package-lock.json –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          if [ -n "$(git status --porcelain package-lock.json 2>/dev/null)" ]; then
            echo "package-lock.json –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –∫–æ–º–º–∏—Ç–∏–º –µ–≥–æ –≤ CI"
          fi
        fi

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

    - name: Display build summary
      run: |
        echo "## üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "Frontend coverage reports are available in artifacts." >> $GITHUB_STEP_SUMMARY

  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ —Å SonarCloud
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    needs: [code-quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

    - name: Build backend for analysis
      run: |
        cd backend
        ./mvnw clean compile test-compile

    - name: Generate frontend coverage
      run: |
        cd frontend
        npm run test:coverage

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: SonarCloud Quality Gate check
      uses: sonarqube-quality-gate-action/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Update security scan summary
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üîí Security & Quality Analysis" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| SonarCloud Scan | ‚úÖ Completed |" >> $GITHUB_STEP_SUMMARY
        echo "| Quality Gate | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
        echo "- [SonarCloud Dashboard](https://sonarcloud.io/project/overview?id=devops-application)" >> $GITHUB_STEP_SUMMARY

  # –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–æ–≤
  docker-build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [build, backend-test, frontend-test, code-quality, security-scan]
    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏ –∏ —Ç–µ–≥–æ–≤
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-application
        path: backend/target/

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-application
        path: frontend/build/

    - name: Generate image tags
      id: meta
      run: |
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          VERSION="latest"
        else
          VERSION="dev-${GITHUB_SHA:0:7}"
        fi
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤
        BACKEND_IMAGE="${DOCKER_REGISTRY}/${GITHUB_REPOSITORY_OWNER}/devops-backend"
        FRONTEND_IMAGE="${DOCKER_REGISTRY}/${GITHUB_REPOSITORY_OWNER}/devops-frontend"
        
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "BACKEND_IMAGE=${BACKEND_IMAGE}" >> $GITHUB_OUTPUT
        echo "FRONTEND_IMAGE=${FRONTEND_IMAGE}" >> $GITHUB_OUTPUT
        echo "BACKEND_TAGS=${BACKEND_IMAGE}:${VERSION},${BACKEND_IMAGE}:latest" >> $GITHUB_OUTPUT
        echo "FRONTEND_TAGS=${FRONTEND_IMAGE}:${VERSION},${FRONTEND_IMAGE}:latest" >> $GITHUB_OUTPUT
        
        echo "üè∑Ô∏è Generated tags:"
        echo "Backend: ${BACKEND_IMAGE}:${VERSION}, ${BACKEND_IMAGE}:latest"
        echo "Frontend: ${FRONTEND_IMAGE}:${VERSION}, ${FRONTEND_IMAGE}:latest"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.BACKEND_TAGS }}
        labels: |
          org.opencontainers.image.title=DevOps Backend
          org.opencontainers.image.description=Spring Boot backend application
          org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.FRONTEND_TAGS }}
        labels: |
          org.opencontainers.image.title=DevOps Frontend
          org.opencontainers.image.description=React frontend application with nginx
          org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Verify pushed images
      run: |
        echo "üîç Verifying pushed images..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend –æ–±—Ä–∞–∑
        docker pull ${{ steps.meta.outputs.BACKEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}
        BACKEND_SIZE=$(docker images --format "table {{.Size}}" ${{ steps.meta.outputs.BACKEND_IMAGE }}:${{ steps.meta.outputs.VERSION }} | tail -n 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend –æ–±—Ä–∞–∑
        docker pull ${{ steps.meta.outputs.FRONTEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}
        FRONTEND_SIZE=$(docker images --format "table {{.Size}}" ${{ steps.meta.outputs.FRONTEND_IMAGE }}:${{ steps.meta.outputs.VERSION }} | tail -n 1)
        
        echo "‚úÖ Backend image verified: ${{ steps.meta.outputs.BACKEND_IMAGE }}:${{ steps.meta.outputs.VERSION }} (${BACKEND_SIZE})"
        echo "‚úÖ Frontend image verified: ${{ steps.meta.outputs.FRONTEND_IMAGE }}:${{ steps.meta.outputs.VERSION }} (${FRONTEND_SIZE})"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è summary
        echo "BACKEND_SIZE=${BACKEND_SIZE}" >> $GITHUB_ENV
        echo "FRONTEND_SIZE=${FRONTEND_SIZE}" >> $GITHUB_ENV

    - name: Update Docker images summary
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üê≥ Docker Images Published" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Image | Version | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|---------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | \`${{ steps.meta.outputs.BACKEND_IMAGE }}\` | \`${{ steps.meta.outputs.VERSION }}\` | ${{ env.BACKEND_SIZE }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | \`${{ steps.meta.outputs.FRONTEND_IMAGE }}\` | \`${{ steps.meta.outputs.VERSION }}\` | ${{ env.FRONTEND_SIZE }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Deployment Commands" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull images" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ steps.meta.outputs.BACKEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ steps.meta.outputs.FRONTEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Deploy with docker-compose" >> $GITHUB_STEP_SUMMARY
        echo "export BACKEND_VERSION=${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "export FRONTEND_VERSION=${{ steps.meta.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "export DOCKER_USERNAME=${{ github.repository_owner }}" >> $GITHUB_STEP_SUMMARY
        echo "docker-compose -f docker-compose.prod.yml up -d" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Image Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.DOCKER_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: ${{ github.repository_owner }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

    - name: Create deployment artifact
      run: |
        mkdir -p deployment
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è
        cat > deployment/.env.deploy << EOF
        # Generated deployment configuration
        # Build: ${{ github.sha }}
        # Version: ${{ steps.meta.outputs.VERSION }}
        # Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
        DOCKER_USERNAME=${{ github.repository_owner }}
        BACKEND_VERSION=${{ steps.meta.outputs.VERSION }}
        FRONTEND_VERSION=${{ steps.meta.outputs.VERSION }}
        
        # Application ports
        FRONTEND_PORT=3000
        BACKEND_PORT=8080
        POSTGRES_PORT=5432
        
        # Database configuration (update with your values)
        POSTGRES_DB=postgres
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=your-secure-password
        EOF
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Deploying DevOps application..."
        echo "Version: ${{ steps.meta.outputs.VERSION }}"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if [ -f .env.deploy ]; then
            export $(cat .env.deploy | grep -v '^#' | xargs)
        fi
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        docker-compose -f docker-compose.prod.yml down || true
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
        docker pull ${{ steps.meta.outputs.BACKEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}
        docker pull ${{ steps.meta.outputs.FRONTEND_IMAGE }}:${{ steps.meta.outputs.VERSION }}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        docker-compose -f docker-compose.prod.yml --env-file .env.deploy up -d
        
        echo "‚úÖ Deployment completed!"
        echo "Backend: http://localhost:${BACKEND_PORT:-8080}"
        echo "Frontend: http://localhost:${FRONTEND_PORT:-3000}"
        EOF
        
        chmod +x deployment/deploy.sh
        
        echo "üì¶ Deployment artifacts created:"
        ls -la deployment/

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-${{ steps.meta.outputs.VERSION }}
        path: deployment/
        retention-days: 30