name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'

jobs:
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–±–æ—Ä–∫–∞ Backend
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run backend tests
      run: |
        cd backend
        ./mvnw clean test
      env:
        # Testcontainers —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Docker
        TESTCONTAINERS_RYUK_DISABLED: true
        TESTCONTAINERS_CHECKS_DISABLE: true
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è fallback, –µ—Å–ª–∏ Testcontainers –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/postgres
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres

    - name: Build backend
      run: |
        cd backend
        ./mvnw clean package -DskipTests

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/target/*.jar

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–±–æ—Ä–∫–∞ Frontend
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
          # –°–æ–∑–¥–∞–µ–º package-lock.json –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          if [ -n "$(git status --porcelain package-lock.json 2>/dev/null)" ]; then
            echo "package-lock.json –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –∫–æ–º–º–∏—Ç–∏–º –µ–≥–æ –≤ CI"
          fi
        fi

    - name: Run frontend linting
      run: |
        cd frontend
        npm run build

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:coverage

    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

  # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
          # –°–æ–∑–¥–∞–µ–º package-lock.json –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          if [ -n "$(git status --porcelain package-lock.json 2>/dev/null)" ]; then
            echo "package-lock.json –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –∫–æ–º–º–∏—Ç–∏–º –µ–≥–æ –≤ CI"
          fi
        fi

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

    - name: Display build summary
      run: |
        echo "## üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "Frontend coverage reports are available in artifacts." >> $GITHUB_STEP_SUMMARY

  # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Backend —Å–±–æ—Ä–∫–∞
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build backend application
      run: |
        cd backend
        ./mvnw clean package -DskipTests
        echo "Backend JAR built successfully"
        ls -la target/*.jar

    # Frontend —Å–±–æ—Ä–∫–∞
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json', 'frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
          ${{ runner.os }}-node-

    - name: Install frontend dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Build frontend application
      run: |
        cd frontend
        npm run build
        echo "Frontend build completed successfully"
        ls -la build/

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    - name: Upload backend JAR
      uses: actions/upload-artifact@v4
      with:
        name: backend-application
        path: backend/target/*.jar
        retention-days: 7

    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-application
        path: frontend/build/
        retention-days: 7

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    - name: Create release archive
      run: |
        mkdir -p release
        cp backend/target/*.jar release/
        cp -r frontend/build release/frontend-build
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –≤–µ—Ä—Å–∏–µ–π
        VERSION=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}
        tar -czf release-${VERSION}.tar.gz -C release .
        
        echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV
        echo "Release archive created: release-${VERSION}.tar.gz"

    - name: Upload release archive
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ env.RELEASE_VERSION }}
        path: release-${{ env.RELEASE_VERSION }}.tar.gz
        retention-days: 30

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    - name: Verify build artifacts
      run: |
        echo "=== Backend JAR Info ==="
        BACKEND_JAR=$(find backend/target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar")
        if [ -f "$BACKEND_JAR" ]; then
          echo "‚úÖ Backend JAR found: $(basename $BACKEND_JAR)"
          echo "üì¶ Size: $(du -h $BACKEND_JAR | cut -f1)"
          echo "üîç JAR contents:"
          jar -tf "$BACKEND_JAR" | head -10
          echo "..."
        else
          echo "‚ùå Backend JAR not found!"
          exit 1
        fi
        
        echo ""
        echo "=== Frontend Build Info ==="
        if [ -d "frontend/build" ]; then
          echo "‚úÖ Frontend build directory found"
          echo "üì¶ Size: $(du -sh frontend/build | cut -f1)"
          echo "üìÅ Contents:"
          find frontend/build -type f -name "*.js" -o -name "*.css" -o -name "*.html" | head -10
        else
          echo "‚ùå Frontend build directory not found!"
          exit 1
        fi

    - name: Update build summary
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üèóÔ∏è Application Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Artifact |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        
        BACKEND_JAR=$(find backend/target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar")
        BACKEND_SIZE=$(du -h "$BACKEND_JAR" | cut -f1)
        FRONTEND_SIZE=$(du -sh frontend/build | cut -f1)
        
        echo "| Backend | ‚úÖ Built | JAR ($BACKEND_SIZE) |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ‚úÖ Built | Static files ($FRONTEND_SIZE) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend JAR**: \`$(basename $BACKEND_JAR)\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Build**: Static files ready for deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Archive**: \`release-${{ env.RELEASE_VERSION }}.tar.gz\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Ready for Deployment" >> $GITHUB_STEP_SUMMARY
        echo "All application artifacts are built and ready for deployment to production environment." >> $GITHUB_STEP_SUMMARY