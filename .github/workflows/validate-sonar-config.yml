name: 🔍 Validate SonarCloud Configuration

on:
  pull_request:
    paths:
      - 'sonar-project.properties'
      - 'backend/pom.xml'
      - 'frontend/package.json'
      - '.github/workflows/ci.yml'
      - '.github/workflows/validate-sonar-config.yml'

jobs:
  validate-config:
    name: Validate SonarCloud Config
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate sonar-project.properties
      run: |
        echo "🔍 Validating SonarCloud configuration..."
        
        # Проверяем наличие обязательных настроек
        REQUIRED_KEYS=(
          "sonar.projectKey"
          "sonar.organization"
          "sonar.sources"
          "sonar.tests"
          "sonar.host.url"
          "sonar.qualitygate.wait"
        )
        
        echo "📋 Checking required configuration keys..."
        MISSING_KEYS=""
        
        for key in "${REQUIRED_KEYS[@]}"; do
          if ! grep -q "^$key=" sonar-project.properties; then
            echo "❌ Missing required key: $key"
            MISSING_KEYS="$MISSING_KEYS $key"
          else
            echo "✅ Found: $key"
          fi
        done
        
        if [ -n "$MISSING_KEYS" ]; then
          echo ""
          echo "🚫 SonarCloud configuration validation FAILED"
          echo "Missing keys:$MISSING_KEYS"
          exit 1
        fi
        
        # Проверяем специфичные значения
        echo ""
        echo "📊 Validating configuration values..."
        
        # Проверяем URL SonarCloud
        if ! grep -q "sonar.host.url=https://sonarcloud.io" sonar-project.properties; then
          echo "❌ sonar.host.url must be set to https://sonarcloud.io"
          exit 1
        fi
        
        # Проверяем что Quality Gate включен
        if ! grep -q "sonar.qualitygate.wait=true" sonar-project.properties; then
          echo "❌ sonar.qualitygate.wait must be set to true"
          exit 1
        fi
        
        echo "✅ SonarCloud configuration validation passed"

    - name: Validate Maven SonarQube configuration
      run: |
        echo "🔍 Validating Maven SonarQube plugin configuration..."
        
        if [ ! -f "backend/pom.xml" ]; then
          echo "❌ backend/pom.xml not found"
          exit 1
        fi
        
        # Проверяем наличие SonarQube Maven plugin
        if ! grep -q "sonar-maven-plugin" backend/pom.xml; then
          echo "❌ SonarQube Maven plugin not found in pom.xml"
          exit 1
        fi
        
        # Проверяем наличие JaCoCo plugin
        if ! grep -q "jacoco-maven-plugin" backend/pom.xml; then
          echo "❌ JaCoCo Maven plugin not found in pom.xml"
          exit 1
        fi
        
        echo "✅ Maven configuration validation passed"

    - name: Validate Frontend Jest coverage configuration
      run: |
        echo "🔍 Validating Frontend Jest coverage configuration..."
        
        if [ ! -f "frontend/package.json" ]; then
          echo "❌ frontend/package.json not found"
          exit 1
        fi
        
        # Проверяем наличие coverage script
        if ! grep -q "test:coverage" frontend/package.json; then
          echo "❌ test:coverage script not found in package.json"
          exit 1
        fi
        
        # Проверяем Jest coverage configuration
        if ! grep -q "coverageThreshold" frontend/package.json; then
          echo "❌ Jest coverageThreshold not configured"
          exit 1
        fi
        
        echo "✅ Frontend configuration validation passed"

    - name: Validate CI/CD Pipeline Integration
      run: |
        echo "🔍 Validating CI/CD pipeline SonarCloud integration..."
        
        if [ ! -f ".github/workflows/ci.yml" ]; then
          echo "❌ CI workflow not found"
          exit 1
        fi
        
        # Проверяем наличие SonarCloud action в CI
        if ! grep -q "SonarSource/sonarcloud-github-action" .github/workflows/ci.yml; then
          echo "❌ SonarCloud GitHub Action not found in CI workflow"
          exit 1
        fi
        
        # Проверяем наличие Quality Gate check
        if ! grep -q "sonarqube-quality-gate-action" .github/workflows/ci.yml; then
          echo "❌ SonarCloud Quality Gate action not found in CI workflow"
          exit 1
        fi
        
        # Проверяем использование SONAR_TOKEN
        if ! grep -q "SONAR_TOKEN" .github/workflows/ci.yml; then
          echo "❌ SONAR_TOKEN not configured in CI workflow"
          exit 1
        fi
        
        echo "✅ CI/CD pipeline integration validation passed"

    - name: Generate validation report
      run: |
        echo "# 🔍 SonarCloud Configuration Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ✅ Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Description |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
        echo "| SonarCloud Properties | ✅ Valid | All required keys present |" >> $GITHUB_STEP_SUMMARY
        echo "| Maven Configuration | ✅ Valid | SonarQube + JaCoCo plugins configured |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Configuration | ✅ Valid | Jest coverage thresholds set |" >> $GITHUB_STEP_SUMMARY
        echo "| CI/CD Integration | ✅ Valid | SonarCloud actions configured |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Quality Standards" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Coverage Threshold**: 80% minimum" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality Gate**: Enabled and enforced" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Analysis**: OWASP + SonarCloud vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Blocking**: Pipeline fails on quality gate failure" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Configuration is ready for production use!**"
