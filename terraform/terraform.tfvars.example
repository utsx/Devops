# Скопируйте этот файл в terraform.tfvars и заполните своими значениями

# Окружение развертывания (обычно передается из CD pipeline)
environment = "staging"  # staging или production

# Зона Yandex Cloud
yandex_zone = "ru-central1-a"

# Авторизация происходит через yc CLI (service account key)
# Настройте через: yc config set ...

# Настройки Kubernetes кластера
k8s_cluster_name           = "devops-k8s-cluster"
k8s_version               = "1.30"
k8s_release_channel       = "STABLE"  # RAPID, REGULAR, STABLE
k8s_network_policy_provider = "CALICO"
k8s_service_account_name  = "k8s-cluster-sa"

# Настройки группы узлов
node_group_name           = "devops-node-group"
node_group_platform_id    = "standard-v3"
node_group_cores          = 2
node_group_memory         = 4
node_group_core_fraction  = 100
node_group_disk_size      = 64
node_group_disk_type      = "network-ssd"
node_group_preemptible    = false

# Политика масштабирования (выберите один из вариантов)
# Фиксированное количество узлов
node_group_scale_policy = {
  fixed_scale = {
    size = 2
  }
}

# Автомасштабирование (альтернатива фиксированному)
# node_group_scale_policy = {
#   auto_scale = {
#     min     = 1
#     max     = 5
#     initial = 2
#   }
# }

# Настройки сети
subnet_cidr = "10.2.0.0/16"

# SSH настройки для узлов кластера (выберите один из вариантов)

# Вариант 1: Указать содержимое ключа напрямую (рекомендуется)
ssh_public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC... your-public-key-content-here"

# Вариант 2: Указать путь к файлу ключа (альтернатива)
# ssh_public_key_path = "~/.ssh/id_rsa.pub"

ssh_user = "ubuntu"

# Docker образы для приложений
frontend_image = "utsx/devops-frontend:latest"
backend_image  = "utsx/devops-backend:latest"

# Метки для ресурсов
labels = {
  project    = "devops"
  managed_by = "terraform"
  owner      = "your-name"
}
# Примечание: метка environment добавляется автоматически из переменной

# Примеры других конфигураций:

# Для production окружения:
# k8s_release_channel      = "STABLE"
# node_group_cores         = 4
# node_group_memory        = 8
# node_group_disk_size     = 100
# node_group_disk_type     = "network-ssd"
# node_group_preemptible   = false
# node_group_scale_policy = {
#   auto_scale = {
#     min     = 3
#     max     = 10
#     initial = 3
#   }
# }

# Для тестового окружения (экономия средств):
# k8s_release_channel      = "REGULAR"
# node_group_cores         = 2
# node_group_memory        = 2
# node_group_disk_size     = 32
# node_group_disk_type     = "network-hdd"
# node_group_preemptible   = true
# node_group_scale_policy = {
#   fixed_scale = {
#     size = 1
#   }
# }

# Для высокопроизводительных задач:
# node_group_platform_id   = "standard-v3"
# node_group_cores         = 8
# node_group_memory        = 16
# node_group_core_fraction = 100
# node_group_disk_type     = "network-ssd"
# node_group_scale_policy = {
#   auto_scale = {
#     min     = 2
#     max     = 8
#     initial = 4
#   }
# }