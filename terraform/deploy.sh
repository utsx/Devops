#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Kubernetes –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

set -e

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ DevOps –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Kubernetes..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
echo "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."

if ! command -v terraform &> /dev/null; then
    echo "‚ùå Terraform –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Terraform."
    exit 1
fi

if ! command -v yc &> /dev/null; then
    echo "‚ùå Yandex Cloud CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ yc CLI."
    exit 1
fi

if ! command -v kubectl &> /dev/null; then
    echo "‚ùå kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl."
    exit 1
fi

echo "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform
echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform..."
terraform init

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
echo "üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
terraform plan

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
echo "üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
terraform apply -auto-approve

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è kubectl
echo "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ kubectl..."
CLUSTER_NAME=$(terraform output -raw cluster_name)
yc managed-kubernetes cluster get-credentials $CLUSTER_NAME --external --force

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É–∑–ª–æ–≤
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É–∑–ª–æ–≤..."
kubectl wait --for=condition=Ready nodes --all --timeout=300s

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ namespace –∏ PostgreSQL —Å–Ω–∞—á–∞–ª–∞
echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ namespace –∏ PostgreSQL..."
kubectl apply -f k8s-manifests.yaml --selector="app!=devops-backend,app!=devops-frontend"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
kubectl wait --for=condition=available --timeout=300s deployment/postgres -n devops-app

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ PostgreSQL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
kubectl get pods -l app=postgres -n devops-app

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
kubectl apply -f k8s-manifests.yaml

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
kubectl wait --for=condition=available --timeout=300s deployment/devops-backend -n devops-app
kubectl wait --for=condition=available --timeout=300s deployment/devops-frontend -n devops-app

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
kubectl get pods -n devops-app
kubectl get services -n devops-app

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ NodePort —Å–µ—Ä–≤–∏—Å–µ
echo "üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ NodePort —Å–µ—Ä–≤–∏—Å–µ..."

# –ü–æ–ª—É—á–∞–µ–º NodePort
NODE_PORT=$(kubectl get services -n devops-app devops-frontend-service -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "")

# –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP –ª—é–±–æ–π –Ω–æ–¥—ã –∫–ª–∞—Å—Ç–µ—Ä–∞
EXTERNAL_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}' 2>/dev/null || echo "")

if [ "$EXTERNAL_IP" != "" ] && [ "$NODE_PORT" != "" ]; then
    echo "‚úÖ NodePort —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω:"
    echo "   - –í–Ω–µ—à–Ω–∏–π IP –Ω–æ–¥—ã: $EXTERNAL_IP"
    echo "   - NodePort: $NODE_PORT"
    echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: http://$EXTERNAL_IP:$NODE_PORT"
    
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å frontend
    if curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP:$NODE_PORT | grep -q "200\|301\|302"; then
        echo "‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —á–µ—Ä–µ–∑ frontend
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API —á–µ—Ä–µ–∑ frontend..."
        if curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP:$NODE_PORT/api/actuator/health | grep -q "200"; then
            echo "‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ frontend!"
        else
            echo "‚ö†Ô∏è  API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ frontend —Ä–∞–±–æ—Ç–∞–µ—Ç. Backend –º–æ–∂–µ—Ç –µ—â–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è."
        fi
        
        echo "üéâ –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://$EXTERNAL_IP:$NODE_PORT"
        echo "üìã API endpoint: http://$EXTERNAL_IP:$NODE_PORT/api/actuator/health"
    else
        echo "‚ö†Ô∏è  Frontend –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        echo "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ—Ä—Ç $NODE_PORT –æ—Ç–∫—Ä—ã—Ç –≤ –≥—Ä—É–ø–ø–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    fi
else
    echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ NodePort —Å–µ—Ä–≤–∏—Å–µ"
    echo "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–∏—Å –∫–æ–º–∞–Ω–¥–æ–π:"
    echo "kubectl get services -n devops-app devops-frontend-service"
    echo ""
    echo "üìã –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "kubectl describe service devops-frontend-service -n devops-app"
    echo "kubectl get nodes -o wide"
fi

echo ""
echo "üìä –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
echo "üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
kubectl apply -f monitoring-manifests.yaml

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Prometheus
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Prometheus..."
kubectl wait --for=condition=ready pod -l app=prometheus -n monitoring --timeout=300s

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å Prometheus
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ Prometheus..."
if kubectl get events -n monitoring --field-selector reason=FailedAttachVolume | grep -q "Multi-Attach error"; then
    echo "üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ Multi-Attach, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º..."
    kubectl delete pod -l app=prometheus -n monitoring --force --grace-period=0
    sleep 10
    kubectl wait --for=condition=ready pod -l app=prometheus -n monitoring --timeout=300s
fi

PROMETHEUS_POD=$(kubectl get pods -n monitoring -l app=prometheus -o jsonpath='{.items[0].metadata.name}')
if [ ! -z "$PROMETHEUS_POD" ]; then
    if kubectl logs -n monitoring $PROMETHEUS_POD --tail=50 | grep -q "permission denied"; then
        echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ Prometheus, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..."
        kubectl rollout restart deployment/prometheus -n monitoring
        kubectl rollout status deployment/prometheus -n monitoring --timeout=300s
        echo "‚úÖ Prometheus –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"
    else
        echo "‚úÖ Prometheus –∑–∞–ø—É—â–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    fi
fi

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Grafana
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Grafana..."
if kubectl get events -n monitoring --field-selector reason=FailedAttachVolume | grep -q "grafana.*Multi-Attach error"; then
    echo "üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ Multi-Attach –¥–ª—è Grafana, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º..."
    kubectl delete pod -l app=grafana -n monitoring --force --grace-period=0
    sleep 10
fi

kubectl wait --for=condition=ready pod -l app=grafana -n monitoring --timeout=300s

GRAFANA_POD=$(kubectl get pods -n monitoring -l app=grafana -o jsonpath='{.items[0].metadata.name}')
if [ ! -z "$GRAFANA_POD" ]; then
    if kubectl logs -n monitoring $GRAFANA_POD --tail=50 | grep -q "Permission denied\|not writable\|can't create directory"; then
        echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ Grafana, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..."
        kubectl rollout restart deployment/grafana -n monitoring
        kubectl rollout status deployment/grafana -n monitoring --timeout=300s
        echo "‚úÖ Grafana –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"
    else
        echo "‚úÖ Grafana –∑–∞–ø—É—â–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    fi
fi

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
kubectl get svc -n monitoring

# –ü–æ–ª—É—á–∞–µ–º IP —É–∑–ª–æ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Grafana
NODE_IPS=$(kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}')
if [ -z "$NODE_IPS" ]; then
    NODE_IPS=$(kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}')
fi

echo ""
echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
if [ "$EXTERNAL_IP" != "" ] && [ "$NODE_PORT" != "" ]; then
    echo "  Frontend: http://$EXTERNAL_IP:$NODE_PORT"
    echo "  API: http://$EXTERNAL_IP:$NODE_PORT/api/actuator/health"
fi
echo ""
echo "üìä –î–æ—Å—Ç—É–ø –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É:"
echo "=== GRAFANA ==="
if [ ! -z "$NODE_IPS" ]; then
    for NODE_IP in $NODE_IPS; do
        echo "  NodePort: http://$NODE_IP:32000"
    done
else
    echo "  NodePort: http://NODE-IP:32000 (–∑–∞–º–µ–Ω–∏—Ç–µ NODE-IP –Ω–∞ IP —É–∑–ª–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞)"
fi
echo "  Port-forward: kubectl port-forward -n monitoring svc/grafana 3000:3000"
echo "  –õ–æ–≥–∏–Ω: admin, –ü–∞—Ä–æ–ª—å: admin123"
echo ""
echo "=== PROMETHEUS ==="
echo "  Port-forward: kubectl port-forward -n monitoring svc/prometheus 9090:9090"
# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ—Ç—Ä–∏–∫..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backend —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
BACKEND_POD=$(kubectl get pods -n devops-app -l app=devops-backend -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
if [ ! -z "$BACKEND_POD" ]; then
    echo "  - –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ backend..."
    if ! lsof -i :8083 >/dev/null 2>&1; then
        kubectl port-forward -n devops-app $BACKEND_POD 8083:8080 &
        BACKEND_CHECK_PID=$!
        sleep 3
        
        if curl -s http://localhost:8083/actuator/prometheus | grep -q "http_server_requests_seconds"; then
            echo "‚úÖ Backend —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        else
            echo "‚ö†Ô∏è  Backend –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ"
        fi
        
        kill $BACKEND_CHECK_PID 2>/dev/null || true
        sleep 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º targets –≤ Prometheus
if [ ! -z "$PROMETHEUS_POD" ]; then
    echo "  - –ü—Ä–æ–≤–µ—Ä—è–µ–º targets –≤ Prometheus..."
    if ! lsof -i :9092 >/dev/null 2>&1; then
        kubectl port-forward -n monitoring svc/prometheus 9092:9090 &
        PROMETHEUS_CHECK_PID=$!
        sleep 3
        
        if curl -s http://localhost:9092/api/v1/targets | grep -q "devops-backend"; then
            echo "‚úÖ Prometheus –æ–±–Ω–∞—Ä—É–∂–∏–ª backend target"
        else
            echo "‚ö†Ô∏è  Prometheus –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª backend target (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è)"
        fi
        
        kill $PROMETHEUS_CHECK_PID 2>/dev/null || true
        sleep 1
    fi
fi

echo ""
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "=== –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ==="
echo "  kubectl get pods -n devops-app                    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
echo "  kubectl get services -n devops-app                # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
echo "  kubectl logs -n devops-app -l app=devops-backend  # –õ–æ–≥–∏ backend"
echo "  kubectl logs -n devops-app -l app=devops-frontend # –õ–æ–≥–∏ frontend"
echo ""
echo "=== –ú–û–ù–ò–¢–û–†–ò–ù–ì ==="
echo "  kubectl get pods -n monitoring                    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
echo "  kubectl logs -n monitoring deployment/prometheus  # –õ–æ–≥–∏ Prometheus"
echo "  kubectl logs -n monitoring deployment/grafana     # –õ–æ–≥–∏ Grafana"
echo "  ./validate-metrics.sh                             # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫"
echo ""
echo "üîß –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "  terraform destroy"