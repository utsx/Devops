#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Kubernetes –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

set -e

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ DevOps –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Kubernetes..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
echo "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."

if ! command -v terraform &> /dev/null; then
    echo "‚ùå Terraform –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Terraform."
    exit 1
fi

if ! command -v yc &> /dev/null; then
    echo "‚ùå Yandex Cloud CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ yc CLI."
    exit 1
fi

if ! command -v kubectl &> /dev/null; then
    echo "‚ùå kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl."
    exit 1
fi

echo "‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform
echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform..."
terraform init

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
echo "üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
terraform plan

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
echo "üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
terraform apply -auto-approve

# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è kubectl
echo "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ kubectl..."
CLUSTER_NAME=$(terraform output -raw cluster_name)
yc managed-kubernetes cluster get-credentials $CLUSTER_NAME --external --force

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É–∑–ª–æ–≤
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É–∑–ª–æ–≤..."
kubectl wait --for=condition=Ready nodes --all --timeout=300s

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ namespace –∏ PostgreSQL —Å–Ω–∞—á–∞–ª–∞
echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ namespace –∏ PostgreSQL..."
kubectl apply -f k8s-manifests.yaml --selector="app!=devops-backend,app!=devops-frontend"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
kubectl wait --for=condition=available --timeout=300s deployment/postgres -n devops-app

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ PostgreSQL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
kubectl get pods -l app=postgres -n devops-app

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
kubectl apply -f k8s-manifests.yaml

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
kubectl wait --for=condition=available --timeout=300s deployment/devops-backend -n devops-app
kubectl wait --for=condition=available --timeout=300s deployment/devops-frontend -n devops-app

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
kubectl get pods -n devops-app
kubectl get services -n devops-app

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP LoadBalancer
echo "üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP LoadBalancer..."
echo "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç)..."

# –ñ–¥–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)
for i in {1..30}; do
    EXTERNAL_IP=$(kubectl get services -n devops-app devops-frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
    if [ "$EXTERNAL_IP" != "" ] && [ "$EXTERNAL_IP" != "null" ]; then
        echo "‚úÖ LoadBalancer –≤–Ω–µ—à–Ω–∏–π IP –ø–æ–ª—É—á–µ–Ω: $EXTERNAL_IP"
        break
    fi
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ LoadBalancer IP... ($i/30)"
    sleep 10
done

if [ "$EXTERNAL_IP" != "" ] && [ "$EXTERNAL_IP" != "null" ]; then
    echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: http://$EXTERNAL_IP"
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å frontend
    if curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP | grep -q "200\|301\|302"; then
        echo "‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —á–µ—Ä–µ–∑ frontend
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API —á–µ—Ä–µ–∑ frontend..."
        if curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP/api/actuator/health | grep -q "200"; then
            echo "‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ frontend!"
        else
            echo "‚ö†Ô∏è  API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ frontend —Ä–∞–±–æ—Ç–∞–µ—Ç. Backend –º–æ–∂–µ—Ç –µ—â–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è."
        fi
        
        echo "üéâ –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://$EXTERNAL_IP"
        echo "üìã API endpoint: http://$EXTERNAL_IP/api/actuator/health"
    else
        echo "‚ö†Ô∏è  Frontend –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    fi
else
    echo "‚è≥ LoadBalancer IP –µ—â–µ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π:"
    echo "kubectl get services -n devops-app devops-frontend-service"
    echo ""
    echo "üìã –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "kubectl describe service devops-frontend-service -n devops-app"
    echo "kubectl get events -n devops-app | grep LoadBalancer"
fi

echo ""
echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  kubectl get pods -n devops-app                    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤"
echo "  kubectl get services -n devops-app                # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "  kubectl logs -n devops-app -l app=devops-backend  # –õ–æ–≥–∏ backend"
echo "  kubectl logs -n devops-app -l app=devops-frontend # –õ–æ–≥–∏ frontend"
echo ""
echo "üîß –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "  terraform destroy"