spring.application.name=Devops

# Database configuration for Docker
spring.datasource.url=jdbc:postgresql://postgres:5432/devops
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA configuration
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Liquibase configuration
spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml

# Server configuration
server.port=8080
server.servlet.context-path=/

# Logging configuration
logging.level.ru.utsx.Devops=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=WARN
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# CORS configuration for Docker
cors.allowed-origins=http://localhost:3000,http://frontend:80

# Actuator endpoints for health checks and metrics
management.endpoints.web.exposure.include=health,info,prometheus,metrics
management.endpoint.health.show-details=when-authorized
management.endpoint.prometheus.enabled=true
management.endpoint.metrics.enabled=true
management.health.db.enabled=true

# Micrometer Prometheus configuration
management.metrics.export.prometheus.enabled=true
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles.http.server.requests=0.5,0.9,0.95,0.99
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.environment=docker