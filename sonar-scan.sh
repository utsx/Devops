#!/bin/bash

# SonarCloud Local Analysis Script
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –ª–æ–∫–∞–ª—å–Ω–æ —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–æ –∏ –≤ CI

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Starting local SonarCloud analysis...${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -z "$SONAR_TOKEN" ]; then
    echo -e "${RED}‚ùå SONAR_TOKEN environment variable is not set${NC}"
    echo "Please set your SonarCloud token:"
    echo "export SONAR_TOKEN=your_token_here"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Java
if ! command -v java &> /dev/null; then
    echo -e "${RED}‚ùå Java is not installed${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Node.js
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js is not installed${NC}"
    exit 1
fi

echo -e "${YELLOW}üìã Running pre-analysis checks...${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "backend/pom.xml" ]; then
    echo -e "${RED}‚ùå Backend pom.xml not found${NC}"
    exit 1
fi

if [ ! -f "frontend/package.json" ]; then
    echo -e "${RED}‚ùå Frontend package.json not found${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Pre-analysis checks passed${NC}"

# –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
echo -e "${YELLOW}üßπ Cleaning previous artifacts...${NC}"
rm -rf backend/target/
rm -rf frontend/coverage/
rm -rf frontend/build/

# Backend: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
echo -e "${BLUE}üîß Building and testing backend...${NC}"
cd backend

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å coverage
./mvnw clean test jacoco:report
backend_test_result=$?

if [ $backend_test_result -ne 0 ]; then
    echo -e "${RED}‚ùå Backend tests failed${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º coverage
echo -e "${YELLOW}üìä Checking backend coverage...${NC}"
./mvnw jacoco:check
backend_coverage_result=$?

if [ $backend_coverage_result -ne 0 ]; then
    echo -e "${RED}‚ùå Backend coverage check failed${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Backend tests and coverage passed${NC}"

cd ..

# Frontend: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
echo -e "${BLUE}üîß Testing frontend...${NC}"
cd frontend

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
npm ci

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å coverage
npm run test:coverage
frontend_test_result=$?

if [ $frontend_test_result -ne 0 ]; then
    echo -e "${RED}‚ùå Frontend tests failed${NC}"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º coverage
if [ -f "coverage/coverage-summary.json" ]; then
    coverage=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.lines.pct")
    echo -e "${YELLOW}üìä Frontend coverage: ${coverage}%${NC}"
    
    if [ "$(echo "$coverage >= 80" | bc -l)" -eq 1 ]; then
        echo -e "${GREEN}‚úÖ Frontend coverage meets minimum threshold${NC}"
    else
        echo -e "${RED}‚ùå Frontend coverage (${coverage}%) is below minimum threshold (80%)${NC}"
        exit 1
    fi
else
    echo -e "${RED}‚ùå Frontend coverage report not found${NC}"
    exit 1
fi

cd ..

# –ó–∞–ø—É—Å–∫–∞–µ–º SonarCloud –∞–Ω–∞–ª–∏–∑
echo -e "${BLUE}üîç Running SonarCloud analysis...${NC}"

# –ò—Å–ø–æ–ª—å–∑—É–µ–º sonar-scanner –∏–ª–∏ Maven plugin
if command -v sonar-scanner &> /dev/null; then
    echo -e "${YELLOW}Using sonar-scanner CLI${NC}"
    sonar-scanner \
        -Dsonar.projectKey=utsx_Devops \
        -Dsonar.organization=utsx \
        -Dsonar.sources=backend/src/main,frontend/src \
        -Dsonar.tests=backend/src/test,frontend/src/__tests__ \
        -Dsonar.java.binaries=backend/target/classes \
        -Dsonar.coverage.jacoco.xmlReportPaths=backend/target/site/jacoco/jacoco.xml \
        -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info \
        -Dsonar.typescript.lcov.reportPaths=frontend/coverage/lcov.info \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.token=$SONAR_TOKEN
else
    echo -e "${YELLOW}Using Maven SonarQube plugin${NC}"
    cd backend
    ./mvnw sonar:sonar \
        -Dsonar.token=$SONAR_TOKEN \
        -Dsonar.projectKey=utsx_Devops \
        -Dsonar.organization=utsx \
        -Dsonar.host.url=https://sonarcloud.io
    cd ..
fi

sonar_result=$?

if [ $sonar_result -eq 0 ]; then
    echo -e "${GREEN}üéâ SonarCloud analysis completed successfully!${NC}"
    echo -e "${BLUE}üìä Check results at: https://sonarcloud.io/project/overview?id=utsx_Devops${NC}"
else
    echo -e "${RED}‚ùå SonarCloud analysis failed${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ All quality checks passed!${NC}"
